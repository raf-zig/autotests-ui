## Имя вашего workflow, которое будет отображаться в интерфейсе GitHub Actions
#name: UI tests
#
## Указываем, когда будет запускаться данный workflow
#on:
#  push:
#    branches:
#      - master  # Запускать workflow, когда будет сделан коммит в ветку main
#  pull_request:
#    branches:
#      - master  # Запускать workflow, когда будет сделан pull request в ветку main
#
## Определяем все шаги, которые должны быть выполнены в рамках работы с тестами
#jobs:
#  run-tests:
#    runs-on: ubuntu-latest  # Указываем, что тесты будут запускаться на последней версии Ubuntu
#
#    steps:
#      # 1. Шаг, который будет клонировать ваш репозиторий на машину GitHub Actions
#      - name: Check out repository
#        uses: actions/checkout@v4  # Используем GitHub Action для клонирования репозитория
#
#      # 2. Шаг для установки Python на виртуальной машине
#      - name: Set up Python
#        uses: actions/setup-python@v4  # Используем GitHub Action для установки Python
#        with:
#          python-version: '3.11'  # Устанавливаем версию Python 3.11 (можно заменить на другую версию)
#
#      # 3. Шаг для установки всех зависимостей проекта
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip  # Обновляем pip до последней версии
#          pip install -r requirements.txt  # Устанавливаем зависимости, указанные в requirements.txt
#          playwright install --with-deps  # Устанавливаем браузеры для Playwright (если они не установлены)
#
#      # 4. Шаг для запуска тестов с использованием pytest и генерации отчётов Allure
#      - name: Run Playwright tests with pytest and generate Allure results
#        run: |
#          pytest -m regression --alluredir=allure-results --numprocesses 2  # Запускаем тесты, отмеченные как "regression", генерируем результаты для Allure
#
#      - name: Get Allure history
#        uses: actions/checkout@v4  # Опять клонируем репозиторий, чтобы получить историю отчётов
#        if: always()  # Всегда выполняем, независимо от успеха или неудачи предыдущих шагов
#        continue-on-error: true  # Если здесь возникнет ошибка, workflow всё равно продолжит выполнение
#        with:
#          ref: gh-pages  # Указываем ветку gh-pages для получения отчётов
#          path: gh-pages  # Указываем путь для сохранения отчётов
#
#       # Сохраняем папку allure-results как артефакт
#      - name: Upload Allure results artifact
#        uses: actions/upload-artifact@v4
#        if: always()  # Сохраняем даже при падении тестов
#        with:
#          name: allure-results
#          path: allure-results
#
#  publish-report:
#    needs:  run-tests
#    runs-on: ubuntu-latest
#    if: success() || failure()
#    steps:
#      - name: Download a single artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: allure-results
#          path: allure-results
#
#      - name: Generates Allure Report with history
#        uses: simple-elf/allure-report-action@v1.7  # Используем готовое решение из GitHub Marketplace для генерации Allure отчёта
#        if: always()  # Этот шаг тоже всегда выполняется
#        with:
#          allure_results: allure-results  # Указываем каталог с результатами тестов
#          allure_history: allure-history
#
#      # 7. Шаг для деплоя отчёта Allure на GitHub Pages, чтобы его можно было просматривать в браузере
#      - name: Deploy report to Github Pages
#        if: always()  # Выполняется всегда, независимо от успеха других шагов
#        uses: peaceiris/actions-gh-pages@v4  # Используем GitHub Action для публикации отчёта на GitHub Pages
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}  # Токен для аутентификации на GitHub
#          publish_branch: gh-pages  # Указываем, что отчёт будет опубликован в ветке gh-pages
#          publish_dir: allure-history
name: UI tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          playwright install --with-deps

      - name: Run Playwright tests with pytest and generate Allure results
        run: |
          pytest -m regression --alluredir=allure-results --numprocesses 2

      # Восстанавливаем историю покрытия из кеша
      - name: Restore Coverage history
        uses: actions/cache/restore@v4
        with:
          path: coverage-history.json
          key: coverage-history-${{ github.run_id }}
          restore-keys: |
            coverage-history-

      # Генерируем HTML-отчет и обновляем историю
      - name: Generate Coverage report
        run: |
          ui-coverage-tool save-report

      # Сохраняем историю обратно в кеш
      - name: Cache Coverage  history
        if: always()
        uses: actions/cache/save@v4
        with:
          path: coverage-history.json
          key: coverage-history-${{ github.run_id }}

      # Загружаем HTML-отчет как артефакт
      - name: Upload Coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results


  publish-report:
    needs: [ run-tests ]
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      - name: Download Allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Generates Allure Report with history
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          allure_results: allure-results
          allure_history: allure-history

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history
